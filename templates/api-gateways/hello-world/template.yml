AWSTemplateFormatVersion: "2010-09-09"

Description: API Gateway configuration for the Lambda function integrated with the layer.

Parameters:
  CommitMessage:
    Type: String
  EndPoint:
    Type: String
    Default: hello-nghiem
  MethodAPI:
    Type: String
    Default: get
  InfrastructureName:
    Type: String
    Default: nx-vid
  EnvironmentType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: Specify either dev, test or prod.

Mappings:
  UpperCaseMethodAPI:
    get:
      Method: GET
    post:
      Method: POST
    put:
      Method: PUT
    delete:
      Method: DELETE

Resources:
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !ImportValue RestApiRootResourceId
      RestApiId: !ImportValue RestApiId
      PathPart: !Ref EndPoint

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${InfrastructureName}-${MethodAPI}-${EndPoint}
      Handler: lambda_function.handler
      Role: !ImportValue LambdaExecutionRole
      Code:
        S3Bucket: my-bucket-bucket
        S3Key: lambda-functions/get-hello-world-|COMMIT_HASH|.zip
      Runtime: python3.12
      Environment:
        Variables:
          ENV_TYPE: !Ref EnvironmentType
      Layers:
        - !ImportValue numpy-layer
  LambdaVersion|COMMIT_HASH|:
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: !Ref CommitMessage
  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion|COMMIT_HASH|.Version
      Description: !Ref CommitMessage
      Name: !Ref EnvironmentType

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaAlias
    Properties:
      FunctionName: !Sub ${LambdaFunction.Arn}:${EnvironmentType}
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiId}/*/${MethodAPIUpper}/${EndPoint}
          - RestApiId: !ImportValue RestApiId
            MethodAPIUpper: !FindInMap [UpperCaseMethodAPI, !Ref MethodAPI, Method]

  ApiGatewayRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !ImportValue RestApiId
      Name: ValidateQueryString
      ValidateRequestParameters: true
      ValidateRequestBody: false
      
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaFunction
    Properties:
      HttpMethod: !FindInMap [UpperCaseMethodAPI, !Ref MethodAPI, Method]
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !ImportValue RestApiId
      AuthorizationType: NONE
      RequestValidatorId: !Ref ApiGatewayRequestValidator
      RequestParameters:
        method.request.querystring.name: true
        method.request.querystring.age: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:${EnvironmentType}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  # ApiGatewayDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   DependsOn: ApiGatewayMethod
  #   Properties:
  #     RestApiId: !ImportValue RestApiId

  # ApiGatewayStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     StageName: !Ref EnvironmentType
  #     DeploymentId: !Ref ApiGatewayDeployment
  #     RestApiId: !ImportValue RestApiId

# Outputs:
#   ApiGatewayUrl:
#     Description: URL of the API Gateway
#     Value: !Sub https://${RestApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentType}/${EndPoint} 