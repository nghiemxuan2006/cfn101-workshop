AWSTemplateFormatVersion: "2010-09-09"

Description: API Gateway configuration for the Lambda function integrated with the layer.

Parameters:
  CommitMessage:
    Type: String
  LambdaFunctionFileName:
    Type: String
  EndPoint:
    Type: String
  MethodAPI:
    Type: String
    Default: get
  InfrastructureName:
    Type: String
    Default: nx-vid
  EnvironmentType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: Specify either dev, test or prod.

Mappings:
  UpperCaseMethodAPI:
    get:
      Method: GET
    post:
      Method: POST
    put:
      Method: PUT
    delete:
      Method: DELETE

Resources:

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${InfrastructureName}-${MethodAPI}-${LambdaFunctionFileName}
      Handler: lambda_function.handler
      Role: !ImportValue LambdaExecutionRole
      Code:
        S3Bucket: my-bucket-bucket
        S3Key: !Sub lambda-functions/${MethodAPI}-${LambdaFunctionFileName}-|COMMIT_HASH|.zip
      Runtime: python3.12
      Environment:
        Variables:
          ENV_TYPE: !Ref EnvironmentType
      Layers:
        - !ImportValue pandas-layer
            
  ApiGatewayResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !ImportValue RestApiId
      Name: PersonModel
      ContentType: application/json
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: PersonModel
        type: object
        properties: 
          name: 
            type: string
          age:
            type: integer
        required:
          - name
          - age
          

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaFunction
    Properties:
      HttpMethod: !FindInMap [UpperCaseMethodAPI, !Ref MethodAPI, Method]
      ResourceId: !ImportValue ApiGatewayResourceId
      RestApiId: !ImportValue RestApiId
      AuthorizationType: NONE
      RequestValidatorId: !ImportValue ApiGatewayRequestValidator
      RequestModels:
        application/json: !Ref ApiGatewayResponseModel
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}
            - ":${stageVariables.env}/invocations"
        RequestTemplates:
          # if have "", JSON parser will treat it as a string value, otherwise, it will be treated as a number
          application/json: |
            {
              "name": "$input.json('name')",
              #if($input.json('age').matches("^[0-9]+$"))
                #if($input.json('age').startsWith("0") && $input.json('age').length() > 1)
                  "age": "$input.json('age')"
                #else
                  "age": $input.json('age')
                #end
              #else
                "age": null
              #end
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: Empty
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  # ApiGatewayDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   DependsOn: ApiGatewayMethod
  #   Properties:
  #     RestApiId: !ImportValue RestApiId
  # ApiGatewayStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     StageName: !Ref EnvironmentType
  #     DeploymentId: !Ref ApiGatewayDeployment
  #     RestApiId: !ImportValue RestApiId

# Outputs:
#   ApiGatewayUrl:
#     Description: URL of the API Gateway
#     Value: !Sub https://${RestApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentType}/${EndPoint} 