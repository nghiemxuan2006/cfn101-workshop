AWSTemplateFormatVersion: "2010-09-09"
Description: IAM Role for Infrastructure
Resources:
  LambdaS3AccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Managed policy for Lambda function to access S3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:ListBucket"
              - "s3:DeleteObject"
            Resource: "*" # Replace with your S3 bucket ARN(s) for least privilege
  LambdaSQSAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Managed policy for Lambda function to access SQS"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: "*" # Replace with your SQS queue ARN(s) for least privilege
  LambdaECSAccessManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Managed policy for Lambda function to access ECS"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecs:RunTask"
              - "ecs:StopTask"
              - "ecs:DescribeTasks"
              - "ecs:ListTasks"
              - "iam:PassRole"
            Resource: "*" # Replace with your ECS cluster ARN(s) for least privilege
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies: 
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      ManagedPolicyArns:
        - !Ref LambdaS3AccessManagedPolicy
        - !Ref LambdaSQSAccessManagedPolicy
        - !Ref LambdaECSAccessManagedPolicy
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

Outputs:
  LambdaExecutionRole:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: LambdaExecutionRole
  TaskExecutionRole:
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: TaskExecutionRole